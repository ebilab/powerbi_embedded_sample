<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="X-UA-Compatible" content="ie=edge" />
    <title>Document</title>
    <script src="https://cdn.jsdelivr.net/npm/powerbi-client@2.8.0/dist/powerbi.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios@0.12.0/dist/axios.js"></script>
  </head>
  <body>
    <h1>PowerBI Embedded Sample</h1>
    <div id="embedContainer" style="height: 80vh;"></div>
  </body>

  <script>
    var groupId = '<%- groupId %>';
    var reportId = '<%- reportId %>';
    var embedUrl = `https://app.powerbi.com/reportEmbed?reportId=${reportId}&groupId=${groupId}&w=2`;
    var accessToken = '<%- embedToken %>'

    // Get models. models contains enums that can be used.
    var models = window["powerbi-client"].models;

    // We give All permissions to demonstrate switching between View and Edit mode and saving report.
    var permissions = models.Permissions.All;

    // Embed configuration used to describe the what and how to embed.
    // This object is used when calling powerbi.embed.
    // This also includes settings and options such as filters.
    // You can find more information at https://github.com/Microsoft/PowerBI-JavaScript/wiki/Embed-Configuration-Details.
    var config = {
      type: "report",
      tokenType: models.TokenType.Embed,
      accessToken: accessToken,
      embedUrl: embedUrl,
      id: reportId,
      permissions: permissions,
      settings: {
        filterPaneEnabled: true,
        navContentPaneEnabled: true
      }
    };

    // Get a reference to the embedded report HTML element
    var embedContainer = document.getElementById("embedContainer");

    // Embed the report and display it within the div container.
    var report = powerbi.embed(embedContainer, config);

    // Report.off removes a given event handler if it exists.
    report.off("loaded");

    // Report.on will add an event handler which prints to Log window.
    report.on("loaded", function() {
      console.log("Loaded");
    });

    // Report.off removes a given event handler if it exists.
    report.off("rendered");

    // Report.on will add an event handler which prints to Log window.
    report.on("rendered", function() {
      console.log("Rendered");
    });

    report.on("error", function(event) {
      console.log(event.detail);

      report.off("error");
    });

    report.off("saved");
    report.on("saved", function(event) {
      console.log(event.detail);
      if (event.detail.saveAs) {
        console.log(
          "In order to interact with the new report, create a new token and load the new report"
        );
      }
    });
  </script>
</html>
